/*
Given the head of a singly linked list where elements are sorted in ascending order, 
convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in
which the depth of the two subtrees of every node never differ by more than 1.
*/
//Top down (time = O(n log(n))). recursively find middle, then divide list into 2 halves
var sortedListToBST = function(head) {
    
    function findMiddle(node){
        if(!node){
            return;
        }
        let prev = null;
        let slow = node;
        let fast = node;
        
        while(fast && fast.next){
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        
        if(prev){
            prev.next = null;
        }
        return slow;
    }

    
    function toBST(head){
        if(!head){
            return null;
        }
        let mid = findMiddle(head);
        let treeNode = new TreeNode(mid.val);
        if(head === mid){
            return treeNode;
        }
        
        treeNode.left = toBST(head);
        treeNode.right = toBST(mid.next);
        return treeNode;
    }
    return toBST(head);

};
=============================================================================================================
//bottom up: time = O(n), find length first, then build up the TreeNodes from recursively dividing the list

   private int findSize(ListNode head) {
    ListNode ptr = head;
    int c = 0;
    while (ptr != null) {
      ptr = ptr.next;  
      c += 1;
    }
    return c;
  }

  private TreeNode convertListToBST(int l, int r) {
    // Invalid case
    if (l > r) {
      return null;
    }

    int mid = (l + r) / 2;

    // First step of simulated inorder traversal. Recursively form
    // the left half
    TreeNode left = this.convertListToBST(l, mid - 1);

    // Once left half is traversed, process the current node
    TreeNode node = new TreeNode(this.head.val);
    node.left = left;

    // Maintain the invariance mentioned in the algorithm
    this.head = this.head.next;

    // Recurse on the right hand side and form BST out of them
    node.right = this.convertListToBST(mid + 1, r);
    return node;
  }

  public TreeNode sortedListToBST(ListNode head) {
    // Get the size of the linked list first
    int size = this.findSize(head);

    this.head = head;

    // Form the BST now that we know the size
    return convertListToBST(0, size - 1);
  }
}
