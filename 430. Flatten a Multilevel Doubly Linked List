/*
You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.

Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.
*/
//When we need to return two traverse values from the recursion, it's helpful to define a variable on the outside
var flatten = function(head) {
    let last = null;
    const dfs = node => {
        if(!node) return;
        dfs(node.next);
        dfs(node.child);
        node.next = last;
        if(last) last.prev = node;
        node.child = null;
        last = node;

    };
    dfs(head);
    return head;
};
