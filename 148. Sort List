/*
Given the head of a linked list, return the list after sorting it in ascending order.

Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?

*/
var sortList = function(head) {
  if(!head || !head.next) return head
  
  let slow = head;
  let fast = head;
  let splitList = {};
  
  while(fast && fast.next){
    splitList = slow;
    slow = slow.next;
    fast = fast.next.next
  }
  
  splitList.next = null
  return merge(sortList(head), sortList(slow))
};
//Fancy merge
function merge(a, b){
  if(!a && b)return b
  if(!b && a)return a
  
  if(a.val < b.val){
    a.next = merge(a.next, b)
    return a
  }else{
    b.next = merge(a, b.next)
    return b
  }
}
